"""
Test case for the print_sorted(self) class instance method.

This test checks if the print_sorted(self) method correctly
prints a sorted list.

>>> BaseGeometry = BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()
>>> print(bg.area())
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> try:
...     print(bg.area())
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented


>>> try:
...     print(bg.area(1))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] area() takes 1 positional argument but 2 were given

>>> try:
...     print(bg.area(1, 2))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] area() takes 1 positional argument but 3 were given

>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg = BaseGeometry()
>>> bg.integer_validator("height", 15)

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer


>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0


>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0



>>> try:
...     bg.integer_validator()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'


>>> try:
...     bg.integer_validator("distance")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 1 required positional argument: 'value'



>>> try:
...     bg.integer_validator(4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 1 required positional argument: 'value'


>>> try:
...     bg.integer_validator("", -1)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError]  must be greater than 0


>>> try:
...     bg.integer_validator("")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 1 required positional argument: 'value'


>>> try:
...     bg.integer_validator("", "")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError]  must be an integer


>>> try:
...     bg.integer_validator([])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("ifiok", 20)

>>> bg.integer_validator(None, 0)
Traceback (most recent call last):
	...
TypeError: unsupported format string passed to NoneType.__format__

>>> bg.integer_validator("name", None)
Traceback (most recent call last):
	...
TypeError: name must be an integer

>>> bg.integer_validator(None, None)
Traceback (most recent call last):
	...
TypeError: unsupported format string passed to NoneType.__format__


"""
